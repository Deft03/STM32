/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
struct __FILE
{
  int handle;
};
FILE __stdout;
//void LCD_putchar(uint8_t ch);
int fputc(int ch, FILE *f) 
{
//  LCD_putchar((uint8_t)ch);
  return ch;
}


/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */
// LCD init
HAL_Delay(15);
HAL_GPIO_WritePin(LCDRS_GPIO_Port,LCDRS_Pin,0);
HAL_GPIO_WritePin(LCDRW_GPIO_Port,LCDRW_Pin,0);

HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,0); // EN = 0
HAL_GPIO_WritePin(LCDD7_GPIO_Port,LCDD7_Pin,0);
HAL_GPIO_WritePin(LCDD6_GPIO_Port,LCDD6_Pin,0);
HAL_GPIO_WritePin(LCDD5_GPIO_Port,LCDD5_Pin,1);
HAL_GPIO_WritePin(LCDD4_GPIO_Port,LCDD4_Pin,1);
HAL_GPIO_WritePin(LCDD3_GPIO_Port,LCDD3_Pin,0);
HAL_GPIO_WritePin(LCDD2_GPIO_Port,LCDD2_Pin,0);
HAL_GPIO_WritePin(LCDD1_GPIO_Port,LCDD1_Pin,0);
HAL_GPIO_WritePin(LCDD0_GPIO_Port,LCDD0_Pin,0);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,1); // EN=1
HAL_Delay(1);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,0); // EN=1

HAL_Delay(5);
HAL_GPIO_WritePin(LCDD7_GPIO_Port,LCDD7_Pin,0);
HAL_GPIO_WritePin(LCDD6_GPIO_Port,LCDD6_Pin,0);
HAL_GPIO_WritePin(LCDD5_GPIO_Port,LCDD5_Pin,1);
HAL_GPIO_WritePin(LCDD4_GPIO_Port,LCDD4_Pin,1);
HAL_GPIO_WritePin(LCDD3_GPIO_Port,LCDD3_Pin,0);
HAL_GPIO_WritePin(LCDD2_GPIO_Port,LCDD2_Pin,0);
HAL_GPIO_WritePin(LCDD1_GPIO_Port,LCDD1_Pin,0);
HAL_GPIO_WritePin(LCDD0_GPIO_Port,LCDD0_Pin,0);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,1); // EN=1
HAL_Delay(1);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,0); // EN=1

HAL_Delay(1); // 100 us
HAL_GPIO_WritePin(LCDD7_GPIO_Port,LCDD7_Pin,0);
HAL_GPIO_WritePin(LCDD6_GPIO_Port,LCDD6_Pin,0);
HAL_GPIO_WritePin(LCDD5_GPIO_Port,LCDD5_Pin,1);
HAL_GPIO_WritePin(LCDD4_GPIO_Port,LCDD4_Pin,1);
HAL_GPIO_WritePin(LCDD3_GPIO_Port,LCDD3_Pin,0);
HAL_GPIO_WritePin(LCDD2_GPIO_Port,LCDD2_Pin,0);
HAL_GPIO_WritePin(LCDD1_GPIO_Port,LCDD1_Pin,0);
HAL_GPIO_WritePin(LCDD0_GPIO_Port,LCDD0_Pin,0);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,1); // EN=1
HAL_Delay(1);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,0); // EN=1

HAL_GPIO_WritePin(LCDD7_GPIO_Port,LCDD7_Pin,0);
HAL_GPIO_WritePin(LCDD6_GPIO_Port,LCDD6_Pin,0);
HAL_GPIO_WritePin(LCDD5_GPIO_Port,LCDD5_Pin,1);
HAL_GPIO_WritePin(LCDD4_GPIO_Port,LCDD4_Pin,1);
HAL_GPIO_WritePin(LCDD3_GPIO_Port,LCDD3_Pin,1); // N=1 : 2 lines
HAL_GPIO_WritePin(LCDD2_GPIO_Port,LCDD2_Pin,0); // F=0 : 5x8
HAL_GPIO_WritePin(LCDD1_GPIO_Port,LCDD1_Pin,0);
HAL_GPIO_WritePin(LCDD0_GPIO_Port,LCDD0_Pin,0);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,1); // EN=1
HAL_Delay(1);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,0); // EN=1

HAL_GPIO_WritePin(LCDD7_GPIO_Port,LCDD7_Pin,0);
HAL_GPIO_WritePin(LCDD6_GPIO_Port,LCDD6_Pin,0);
HAL_GPIO_WritePin(LCDD5_GPIO_Port,LCDD5_Pin,0);
HAL_GPIO_WritePin(LCDD4_GPIO_Port,LCDD4_Pin,0);
HAL_GPIO_WritePin(LCDD3_GPIO_Port,LCDD3_Pin,1);
HAL_GPIO_WritePin(LCDD2_GPIO_Port,LCDD2_Pin,0);
HAL_GPIO_WritePin(LCDD1_GPIO_Port,LCDD1_Pin,0);
HAL_GPIO_WritePin(LCDD0_GPIO_Port,LCDD0_Pin,0);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,1); // EN=1
HAL_Delay(1);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,0); // EN=1

HAL_GPIO_WritePin(LCDD7_GPIO_Port,LCDD7_Pin,0);
HAL_GPIO_WritePin(LCDD6_GPIO_Port,LCDD6_Pin,0);
HAL_GPIO_WritePin(LCDD5_GPIO_Port,LCDD5_Pin,0);
HAL_GPIO_WritePin(LCDD4_GPIO_Port,LCDD4_Pin,0);
HAL_GPIO_WritePin(LCDD3_GPIO_Port,LCDD3_Pin,0);
HAL_GPIO_WritePin(LCDD2_GPIO_Port,LCDD2_Pin,0);
HAL_GPIO_WritePin(LCDD1_GPIO_Port,LCDD1_Pin,0);
HAL_GPIO_WritePin(LCDD0_GPIO_Port,LCDD0_Pin,1);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,1); // EN=1
HAL_Delay(1);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,0); // EN=1

HAL_GPIO_WritePin(LCDD7_GPIO_Port,LCDD7_Pin,0);
HAL_GPIO_WritePin(LCDD6_GPIO_Port,LCDD6_Pin,0);
HAL_GPIO_WritePin(LCDD5_GPIO_Port,LCDD5_Pin,0);
HAL_GPIO_WritePin(LCDD4_GPIO_Port,LCDD4_Pin,0);
HAL_GPIO_WritePin(LCDD3_GPIO_Port,LCDD3_Pin,0);
HAL_GPIO_WritePin(LCDD2_GPIO_Port,LCDD2_Pin,1);
HAL_GPIO_WritePin(LCDD1_GPIO_Port,LCDD1_Pin,1); // ID=1: Increase
HAL_GPIO_WritePin(LCDD0_GPIO_Port,LCDD0_Pin,0); // S=0 : Cursor move
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,1); // EN=1
HAL_Delay(1);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,0); // EN=1

HAL_GPIO_WritePin(LCDD7_GPIO_Port,LCDD7_Pin,0);
HAL_GPIO_WritePin(LCDD6_GPIO_Port,LCDD6_Pin,0);
HAL_GPIO_WritePin(LCDD5_GPIO_Port,LCDD5_Pin,0);
HAL_GPIO_WritePin(LCDD4_GPIO_Port,LCDD4_Pin,0);
HAL_GPIO_WritePin(LCDD3_GPIO_Port,LCDD3_Pin,1);
HAL_GPIO_WritePin(LCDD2_GPIO_Port,LCDD2_Pin,1); // D=1: Display ON
HAL_GPIO_WritePin(LCDD1_GPIO_Port,LCDD1_Pin,1); // C=1: Cursor ON
HAL_GPIO_WritePin(LCDD0_GPIO_Port,LCDD0_Pin,1); // B=1: Blink ON
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,1); // EN=1
HAL_Delay(1);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,0); // EN=1

HAL_GPIO_WritePin(LCDRS_GPIO_Port,LCDRS_Pin,1); // RS=1
HAL_GPIO_WritePin(LCDD7_GPIO_Port,LCDD7_Pin,0); // A =\65
HAL_GPIO_WritePin(LCDD6_GPIO_Port,LCDD6_Pin,1);
HAL_GPIO_WritePin(LCDD5_GPIO_Port,LCDD5_Pin,0);
HAL_GPIO_WritePin(LCDD4_GPIO_Port,LCDD4_Pin,0);
HAL_GPIO_WritePin(LCDD3_GPIO_Port,LCDD3_Pin,0);
HAL_GPIO_WritePin(LCDD2_GPIO_Port,LCDD2_Pin,0);
HAL_GPIO_WritePin(LCDD1_GPIO_Port,LCDD1_Pin,0);
HAL_GPIO_WritePin(LCDD0_GPIO_Port,LCDD0_Pin,1);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,1); // EN=1
HAL_Delay(1);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,0); // EN=1

HAL_GPIO_WritePin(LCDRS_GPIO_Port,LCDRS_Pin,0); // RS=0
HAL_GPIO_WritePin(LCDD7_GPIO_Port,LCDD7_Pin,1); // DDR addr
HAL_GPIO_WritePin(LCDD6_GPIO_Port,LCDD6_Pin,1); // 0x40
HAL_GPIO_WritePin(LCDD5_GPIO_Port,LCDD5_Pin,0);
HAL_GPIO_WritePin(LCDD4_GPIO_Port,LCDD4_Pin,0);
HAL_GPIO_WritePin(LCDD3_GPIO_Port,LCDD3_Pin,0);
HAL_GPIO_WritePin(LCDD2_GPIO_Port,LCDD2_Pin,0);
HAL_GPIO_WritePin(LCDD1_GPIO_Port,LCDD1_Pin,0);
HAL_GPIO_WritePin(LCDD0_GPIO_Port,LCDD0_Pin,0);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,1); // EN=1
HAL_Delay(1);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,0); // EN=1

HAL_GPIO_WritePin(LCDRS_GPIO_Port,LCDRS_Pin,1); // RS=1
HAL_GPIO_WritePin(LCDD7_GPIO_Port,LCDD7_Pin,0); // B =\66
HAL_GPIO_WritePin(LCDD6_GPIO_Port,LCDD6_Pin,1);
HAL_GPIO_WritePin(LCDD5_GPIO_Port,LCDD5_Pin,0);
HAL_GPIO_WritePin(LCDD4_GPIO_Port,LCDD4_Pin,0);
HAL_GPIO_WritePin(LCDD3_GPIO_Port,LCDD3_Pin,0);
HAL_GPIO_WritePin(LCDD2_GPIO_Port,LCDD2_Pin,0);
HAL_GPIO_WritePin(LCDD1_GPIO_Port,LCDD1_Pin,1);
HAL_GPIO_WritePin(LCDD0_GPIO_Port,LCDD0_Pin,0);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,1); // EN=1
HAL_Delay(1);
HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,0); // EN=1
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCDRW_Pin|LCDD2_Pin|LCDD3_Pin|LCDD4_Pin
                          |LCDD5_Pin|LCDD6_Pin|LCDD7_Pin|LCDRS_Pin
                          |LCDEN_Pin|LCDD0_Pin|LCDD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : LCDRW_Pin LCDD2_Pin LCDD3_Pin LCDD4_Pin
                           LCDD5_Pin LCDD6_Pin LCDD7_Pin LCDRS_Pin
                           LCDEN_Pin LCDD0_Pin LCDD1_Pin */
  GPIO_InitStruct.Pin = LCDRW_Pin|LCDD2_Pin|LCDD3_Pin|LCDD4_Pin
                          |LCDD5_Pin|LCDD6_Pin|LCDD7_Pin|LCDRS_Pin
                          |LCDEN_Pin|LCDD0_Pin|LCDD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
